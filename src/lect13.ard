\import Logic (/=, inP, propExt)
\import Logic.Meta
\import Paths.Meta
\import Set
\import Utils
\import lect10(sigmaEq,isProp)
\import lect11 (DecEq)
\import lect12
\import lect12_orig (in)

-- 1. Тип данных Set.

-- Спецификация типа данных Set.
-- setExt эквиваленнтен утверждению, что функция \lam x y => isElem y x : S -> (A -> \Prop) является инъективной.
-- То есть isElem вместе с setExt говорят, что S является подмножеством A -> \Prop, то есть состоит из подмножеств A.
-- empty вместе с emptyProp говорит, что пустое подмножество принадлежит S.
-- Вместе с add, addHead, addTail и addProp это влечет, что все конечные подмножества принадлежат S.
\class SetSpec {A : \Set} (S : \Set)
  | emptySet : S
  | add : A -> S -> S
  | isElem : A -> S -> \Prop
  | setExt (s s' : S) : (\Pi (x : A) -> isElem x s <-> isElem x s') -> s = s'
  | emptySetProp (x : A) : Not (isElem x emptySet)
  | addHead {x : A} {s : S} : isElem x (add x s)
  | addTail {x y : A} {s : S} : isElem x s -> isElem x (add y s)
  | addProp {x y : A} {s : S} : isElem x (add y s) -> Or (x = y) (isElem x s)

\class SetSpec' {A : \Set} (S : \Set)
  | isElem' : S -> A -> \Prop
  | setExt' : isInj isElem'

\truncated \data In {A : \Type} (x : A) (xs : List A) : \Prop \elim xs
  | :: x' xs => { here (x = x') | there (In x xs) }

-- Определим отношение эквивалентности на списках.
-- Два списка эквивалентны, если они содержат одни и те же элементы.
\func EqList {A : \Set} (xs ys : List A) => \Pi (x : A) -> In x xs <-> In x ys

-- Простая реализация SetSpec
\func ListSet (A : \Set) => Quotient (List A) EqList

-- Мы хотим доказать, что наша спецификация полна, то есть, что ListSet -- это единственная реализация, удовлетворяющая ей.
-- Для этого достаточно построить биекцию между произвольной реализацией S и ListSet

-- Любому списку можно сопоставить множество.
\func listToSet {S : SetSpec} (xs : List S.A) : S \elim xs
  | nil => emptySet
  | :: a xs => add a (listToSet xs)

-- In x xs <-> isElem x (listToSet xs)
\lemma listToSet-lem1 {S : SetSpec} {xs : List S.A} {x : S.A} (p : In x xs) : isElem x (listToSet {S} xs) \elim xs, p
  | :: x' xs, here idp => addHead
  | :: x' xs, there p => addTail (listToSet-lem1 p)

\lemma listToSet-lem2 {S : SetSpec} {xs : List S.A} {x : S.A} (p : isElem x (listToSet xs)) : In x xs \elim xs
  | nil => absurd (emptySetProp x p)
  | :: a xs => \case addProp p \with {
    | byLeft q => here q
    | byRight q => there (listToSet-lem2 q)
  }

-- listToSet уважает отношение эквивалентности, а значит у нас есть функция из ListSet в S.
\func listSetToSet {S : SetSpec} (xs : ListSet S.A) : S \elim xs
  | in~ xs => listToSet xs
  | ~-quot {xs} {ys} r i => setExt (listToSet xs) (listToSet ys) (\lam x =>
      (\lam p => listToSet-lem1 ((r x).1 (listToSet-lem2 p)),
       \lam p => listToSet-lem1 ((r x).2 (listToSet-lem2 p)))) @ i

-- Чтобы доказать, что listSetToSet является биекцией, достаточно показать, что она инъекция и сюръекция.
-- Инъективность легко доказывается:
\lemma listSetToSet-inj {S : SetSpec} (xs ys : ListSet S.A) (p : listSetToSet xs = {S} listSetToSet ys) : xs = ys \elim xs, ys
  | in~ xs, in~ ys => quotientEq xs ys (\lam x =>
      (\lam q => listToSet-lem2 (rewriteF p (listToSet-lem1 q)),
       \lam q => listToSet-lem2 (rewrite p (listToSet-lem1 q))))

-- Чтобы доказать сюръективность, нужно добавить условие, что в S лежат только конечные подмножества A.
\class FinSetSpec \extends SetSpec
  | setFin (s : S) : ∃ (xs : List A) (\Pi (x : A) -> isElem x s <-> In x xs)

-- Теперь можно доказать сюръективность.
\func listSetToSet-sur {S : FinSetSpec} (s : S) : ∃ (xs : ListSet S.A) (listSetToSet xs = s)
  => \case setFin s \with {
       | inP (xs,p) => inP (in~ xs, setExt (listToSet xs) s (\lam x => (\lam q => (p x).2 (listToSet-lem2 q), \lam q => listToSet-lem1 ((p x).1 q))))
     }

-- Наша спецификация полна, то есть ListSet -- это единственная ее реализация.
\func listSet=Set {S : FinSetSpec} : ListSet S.A = S
  => \let t => isInj+isSur->isBij listSetToSet listSetToSet-inj listSetToSet-sur
     \in path (iso listSetToSet t.1 t.2 t.3)

-- Наша спецификация корректна, то есть ListSet ей удовлетворяет.
\instance ListSetSet {A : \Set} : FinSetSpec {A} (ListSet A)
  | emptySet => in~ nil
  | add (x : A) (xs : ListSet A) : ListSet A \elim xs {
    | in~ xs => in~ (x :: xs)
    | ~-quot {xs} {ys} r i => ~-quot (\lam y => (cons-lem x xs ys y (r y).1, cons-lem x ys xs y (r y).2)) i
  }
  | isElem (x : A) (xs : ListSet A) : \Prop \elim xs {
    | in~ xs => In x xs
    | ~-quot {xs} {ys} r i => propExt {In x xs} {In x ys} (r x).1 (r x).2 @ i
  }
  | setExt (xs ys : ListSet A) (p : \Pi (x : A) -> isElem x xs <-> isElem x ys) : xs = ys \elim xs, ys {
    | in~ xs, in~ ys => quotientEq xs ys p
  }
  | emptySetProp x => \case __
  | addHead {x : A} {xs : ListSet A} : isElem x (add x xs) \elim xs {
    | in~ xs => here idp
  }
  | addTail {x y : A} {xs : ListSet A} (p : isElem x xs) : isElem x (add y xs) \elim xs {
    | in~ xs => there p
  }
  | addProp {_} {_} {s} p => \case \elim s, \elim p \with {
    | in~ xs, here p => byLeft p
    | in~ ys, there r => byRight r
  }
  | setFin (xs : ListSet A) : ∃ (ys : List A) (\Pi (x : A) -> isElem x xs <-> In x ys) \elim xs {
    | in~ xs => inP (xs, \lam x => (\lam p => p, \lam p => p))
  } \where {
    \func cons-lem {A : \Type} (x : A) (xs ys : List A) (y : A) (p : y `In` xs -> y `In` ys) (y-in-xs : y `In` (x :: xs)) : y `In` (x :: ys) \elim y-in-xs
      | here p => here p
      | there t => there (p t)
  }

-- Мы не предполагали, что равенство на A разрешимо.
-- Поэтому не все функции возможно реализовать для множеств, удовлетворяющих нашей спецификации (так как она корректна и полна, можно реализовать в точности те функции, которые реализуемы для ListSet).
-- Например, мы не можем реализовать функцию size : S -> Nat, так как размер множества add a (add a' empty) зависит от того равны ли a и a' или нет.

-- Но если равенство на A разрешимо, то мы можем реализовать все привычные функции.
\func size {S : FinSetSpec} (d : DecEq S.A) (s : S) : Nat => {?}

\func remove {S : FinSetSpec} (d : DecEq S.A) (a : S.A) (s : S) : S => {?}

-- Можно определить другие реализации FinSetSpec. Например, если равенство на A разрешимо, то можно брать только списки без повторяющихся элементов.
-- \func NubListSet (A : \Set) (d : DecEq A) => {?} -- \Sigma (xs : List A) плюс условие, что все элементы в xs различны, и факторизация по перестановкам

-- 2. Тип данных Map.

\class MapSpec {K : DecSet} {V : \Set} (M : \Set)
  | get : M -> K -> Maybe V
  | emptyMap : M
  | put : K -> V -> M -> M
  | mapExt (m m' : M) : (\Pi (k : K) -> get m k = get m' k) -> m = m'
  | emptyMapProp (k : K) : get emptyMap k = nothing
  | putProp1 (k : K) (v : V) (m : M) : get (put k v m) k = just v
  | putProp2 (k k' : K) (v : V) (m : M) : k /= k' -> get (put k v m) k' = get m k'
  | putProp3 (k k' : K) (v : V) (t : Maybe V) (m : M) : get (put k v m) k' = t -> Or (\Sigma (k = k') (just v = t)) (\Sigma (k /= k') (get m k' = t))

\class MapSpec' {K : DecSet} {V : \Set} (M : \Set)
  | get' : M -> K -> Maybe V
  | mapExt' : isInj get'
