\import Function.Meta
\import Meta
\import Paths (transport,inv)
\import Paths.Meta
\import Utils \hiding (transport)

-- 1. Подмножества, инъективные функции.

-- В теории множеств мы можем использовать подмножества:
-- { x : A | P x } <= A
-- Любой элемент подмножества буквально является элементом исходного множества.

-- In set theory, we have a bijection between subsets of A
-- and equivalence classes of injective function (B -> A)

-- Другой способ -- это вместо подмножеств использовать инъективные функции.
-- В теории типов нам доступен только второй способ.
-- Например, подмножество выше превращается в следующую функцию:
-- \lam t => t.1 : \Sigma (x : A) (P x) -> A
-- Является ли данная функция инъективной?

\func isEven (n : Nat) : Bool
  | 0 => true
  | 1 => false
  | suc (suc n) => isEven n

-- Рассмотрим частный случай этой конструкции.
-- { n : Nat | T (isEven n) } -- теоретико-множественная нотация
\func Even => \Sigma (n : Nat) (T (isEven n)) -- в теории типов записывается так

-- Функция вложения множества четных чисел в множество всех натуральных чисел.
\func Even-inc (e : Even) : Nat => e.1

\func isInj {A B : \Type} (f : A -> B)
  => \Pi {x y : A} -> f x = f y -> x = y
-- Это эквивалентно следующему утверждению только если есть аксиома исключенного третьего.
-- \Pi (x y : A) -> Not (x = y) -> Not (f x = f y)

-- Доказательство того, что четные числа вкладываются в натуральные.
\func Even-inc-isInj : isInj Even-inc
  => \lam {x} {y} p => sigmaEq _ x y p T-lem

\func Even-inc-isInj' : isInj Even-inc
  => \lam {x} {y} p => ext p

-- Чтобы доказать, что пары t1 и t2 равны, достаточно доказать, что их компоненты равны.
\func prodEq {A B : \Type} (t1 t2 : \Sigma A B) (p : t1.1 = t2.1) (q : t1.2 = t2.2)
  : t1 = t2
  => path (\lam i => (p @ i, q @ i))

-- Обобщение предыдущего утверждения для зависимых пар.
\func sigmaEq {A : \Type} (B : A -> \Type) (t1 t2 : \Sigma (x : A) (B x))
  (p : t1.1 = t2.1) (q : transport B p t1.2 = t2.2)
  : t1 = t2
  => ext (p,q)

-- Любые два элемента типа T b равны.
\func T-lem {b : Bool} {x y : T b} : x = y \elim b
  | true => idp
  | false => \case x

-- 2. Еще один пример.

\func mod3 (n : Nat) : Nat
  | 0 => 0
  | 1 => 1
  | 2 => 2
  | suc (suc (suc n)) => mod3 n

\func mod5 (n : Nat) : Nat
  | 0 => 0
  | 1 => 1
  | 2 => 2
  | 3 => 3
  | 4 => 4
  | suc (suc (suc (suc (suc n)))) => mod5 n

-- Определим множество чисел, которые делятся на 3 или на 5.
\func MultipleOf3Or5 => \Sigma (n : Nat) (Either (mod3 n = 0) (mod5 n = 0))

-- Функция, отображающая это множество в множество натуральных чисел.
\func Mul-inc (m : MultipleOf3Or5) => m.1

-- Она не является инъективной.
\func Mul-inc-isInj (p : isInj Mul-inc) : Empty
  => \let t => p {15, inl idp} {15, inr idp} idp \in {?}
-- Проблема в том, что у нас может быть несколько различных доказательств того факта, что число делится на 3 или на 5.

-- 3. Утверждения

-- Проблемы в предыдущем примере не возникло, если бы тип, определяющий подмножество, был утверждением, то есть любые его два элемента были бы равны.
\func isProp (A : \Type) => \Pi (x y : A) -> x = y

-- Пример не утверждения.
\func BoolIsNotProp (p : isProp Bool) : Empty
  => \case p true false

-- 4. Какие предикаты являются настоящими предикатами (то есть возвращают утверждения)?
--    ⊤, ⊥, ∧, ∨, →, ∀, ∃, =, рекурсвиные предикаты, индуктивные предикаты.

-- Пустой тип является утверждением.
\func Empty-isProp : isProp Empty
  => \lam x y => \case x

-- Одноэлементный тип является утверждением.
\func Unit-isProp : isProp (\Sigma)
  => \lam x y => idp

-- Если A и B являются утверждениями, то их произведение (конъюнкция) тоже является утверждением.
\func Sigma-isProp {A B : \Type} (pA : isProp A) (pB : isProp B)
  : isProp (\Sigma A B)
  => \lam t s => ext (pA _ _, pB _ _)

\func Sigma'-isProp {A : \Type} (B : A -> \Type)
                    (pA : isProp A) (pB : \Pi (x : A) -> isProp (B x))
  : isProp (\Sigma (x : A) (B x))
  => \lam t s => ext (pA _ _, pB _ _ _)

-- Это не верно для сумм типов, то есть у нас нет (пока) дизъюнкций.
-- \func Either-isProp {A B : \Type} (pA : isProp A) (pB : isProp B)
--   : isProp (Either A B)
--   => {?}

-- У нас есть импликации.
\func Impl-isProp {A B : \Type} {- (pA : isProp A) -} (pB : isProp B) : isProp (A -> B)
  => \lam f g => ext (\lam a => pB _ _)

-- И квантор всеобщности.
\func forall-isProp {A : \Type} (B : A -> \Type) (pB : \Pi (x : A) -> isProp (B x))
  : isProp (\Pi (x : A) -> B x)
  => \lam f g => ext (\lam a => pB _ _ _)

{- Но квантора существования у нас (пока) нет.
\func exists-isProp {A : \Type} (B : A -> \Type)
                    (pB : \Pi (x : A) -> isProp (B x))
  : isProp (\Sigma (x : A) (B x))
  => {?}
-}

{- Рекурсивно определенный предикат является утверждением, если ... являются таковыми
\func pred (n : Nat) : \Type
  | 0 => ...
  | suc n => ...
-}

-- Индуктивно определенный предикат может быть утверждением, а может и не быть им.

-- Является утверждением
\data \infix 4 <=' (n m : Nat) \with
  | 0, _ => zero<=_
  | suc n, suc m => suc<=suc (n <=' m)

-- Не является утверждением
\data \infix 4 <='' (n m : Nat) \elim m
  | m => <=-refl (n = m)
  | 1 => zero<=one (n = 0)
  | suc m => <=-step (n <='' m)

-- Равенство тоже в общем случае не является утверждением.
-- \func equality-isProp {A : \Type} (a a' : A) : isProp (a = a') => {?}

-- Но для многих типов это верно.
-- Мы будем называть такие типы множествами.
-- Позже мы увидим, что большинство типов являются множествами.
\func isSet (A : \Type) => \Pi (a a' : A) -> isProp (a = a')

-- По определению равенство между элементами множества является утверждением.
\func equality-isProp {A : \Type} (p : isSet A) (a a' : A) : isProp (a = a') => p a a'

-- 5. Примеры множеств: Unit, \Sigma.

\func Empty-isSet : isSet Empty
  => \case __

\func retract-isProp {A B : \Type} (pB : isProp B) (f : A -> B) (g : B -> A)
  (h : \Pi (x : A) -> g (f x) = x) : isProp A
  => \lam x y => inv (h x) *> pmap g (pB _ _) *> h y

\func Unit-isSet : isSet (\Sigma)
  => \lam a a' => retract-isProp Unit-isProp (\lam _ => ()) (\lam _ => idp) (\lam x => \case \elim a', \elim x : a = a' \with {
    | _, idp => idp
  })

\data Unit | unit

\func Unit'-isProp (x y : Unit) : x = y \elim x, y
  | unit, unit => idp

\func Unit'-isSet : isSet Unit
  => \lam a a' => retract-isProp Unit-isProp (\lam _ => ()) (\lam _ => Unit'-isProp a a') (\lam x => \case \elim a', \elim x \with {
    | _, idp => \case \elim a \with {
      | unit => idp
    }
  })

\func setLem {A : \Type} (B : A -> A -> \Type) (pB : \Pi (x y : A) -> isProp (B x y))
             (f : \Pi (a : A) -> B a a) (g : \Pi (a a' : A) -> B a a' -> a = a')
             : isSet A
  => {?}

\func Sigma-isSet {A : \Type} (B : A -> \Type)
                  (pA : isSet A) (pB : \Pi (x : A) -> isSet (B x))
  : isSet (\Sigma (x : A) (B x))
  => setLem {\Sigma (x : A) (B x)} (\lam t s => \Sigma (p : t.1 = s.1) (transport B p t.2 = s.2))
      (\lam t s => Sigma'-isProp _ (pA _ _) (\lam x => unfold isProp (pB _ _ _))) (\lam t => (idp, idp)) (\lam t s p => ext p)

\func Unit''-isSet : isSet Unit
  => setLem (\lam _ _ => \Sigma) (\lam _ _ => Unit-isProp) (\lam a => ()) (\lam a a' _ => Unit'-isProp a a')

-- 6. Свойства операций над =.

\func isGpd (A : \Type) => \Pi (x y : A) -> isSet (x = y)

-- Так как равенства могут быть нетривиальными типами, то различные операции над ними могут быть нетривиальными функциями, а не просто доказательствами импликаций.
-- Например, функция, доказывающая транзитивность, примененная к \Set задает композицию биекций.
-- \func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
--  \elim q
--  | idp => p

-- Мы можем доказывать различные свойства этой функции.
-- Например, idp является единицей справа и слева для *.
\func idp-right {A : \Type} {x y : A} (p : x = y) : p *> idp = p => idp

\func idp-left {A : \Type} {x y : A} (p : x = y) : idp *> p = p \elim p
  | idp => idp

-- * ассоциативна.
\func *-assoc {A : \Type} {x y z w : A} (p : x = y) (q : y = z) (r : z = w)
  : (p *> q) *> r = p *> (q *> r) \elim r
  | idp => idp

-- sym возвращает обратный элемент.
\func sym-left {A : \Type} {x y : A} (p : x = y) : sym p *> p = idp \elim p
  | idp => idp

\func sym-right {A : \Type} {x y : A} (p : x = y) : p *> sym p = idp \elim p
  | idp => idp

-- То есть * похожа на операцию в группе.
-- Мы можем доказать различные равенства, верные в группах.
-- Например, мы можем доказать, что можно сокращать слева на элемент.
\func cancelLeft {A : \Type} {x y z : A}
                 (p : x = y) (q r : y = z) (s : p *> q = p *> r) : q = r \elim p, q
  | idp, idp => s *> idp-left r

-- 7. Гомотопический уровень.

-- isProp == is-(-1)-Type
-- isSet == is-0-Type
-- isGpd == is-1-Type
-- is-2-Type A => \Pi (x y : A) -> isGpd (x = y)
-- is-3-Type A => \Pi (x y : A) -> is-2-Type (x = y)

-- Мы можем определить семейство предикатов на типах:
\func hasLevel (A : \Type) (n : Nat) : \Type \elim n
  | 0 => isSet A
  | suc n => \Pi (x y : A) -> hasLevel (x = y) n

-- Таким образом, isSet A -- это A `hasLevel` 0, а isGpd A -- это A `hasLevel` 1.
\func baz => Nat `hasLevel` 0
