\import Function.Meta
\import Meta
\import Paths.Meta
\import Utils

-- 1. Предикаты.

-- Есть несколько способов определять предикаты над некоторым типом A:
-- * Выразить из через уже существующие (например равенство) и различные логические связки. Например, предикат isEven можно выразить как \lam n => \Sigma (k : Nat) (n = 2 * k).
-- * Рекурсивно. Этот способ работает только если A -- тип данных.
-- * Индуктивно.

-- Определение <= через равенство.
\func lessOrEq (n m : Nat) => \Sigma (k : Nat) (m = n Nat.+ k)

-- \func lessOrEq_int (n m : Int) => \Sigma (k : Nat) (m = n Nat.+ k)

-- Рекурсивное определение предиката <=
\func lessOrEq' (n m : Nat) : \Type \elim n, m
  | 0, _ => \Sigma
  | suc n, 0 => Empty
  | suc n, suc m => lessOrEq' n m

{-

----------
  0 <= m


    n <= m
--------------
suc n <= suc m

 -}

-- Первое индуктивное определение <=
\data LessOrEq (n m : Nat) \with
  | 0, m => z<=_
  | suc n, suc m => s<=s (LessOrEq n m)

\func test11 : LessOrEq 0 100 => z<=_
\func test12 : LessOrEq 3 67 => s<=s (s<=s (s<=s z<=_))
-- \func test10 : LessOrEq 1 0 => ....

-- Один и тот же предикат можно определить индуктивно различными способами.
-- Когда мы хотим задать предикат индуктивно, нам нужно просто написать набор правил, которые верны для данного предиката и при этом пораждают его.
-- Например, в LessOrEq у нас два правила: 0 <= m для любого m и, если n <= m, то suc n <= suc m. Любое неравенство можно получить из этих двух правил.

-- Но это не единственный набор правил, который пораждает <=.
-- Например, мы можем взять следующий набор: n <= n для всех n и, если n <= m, то n <= suc m.
-- Этот набор реализован в LessOrEq''.

{-

  n = m
----------
  n <= m

 n <= m
----------
n <= suc m

 -}

-- Второе индуктивное определение <=
\data LessOrEq' (n m : Nat) \with
  | n, m => <=-refl (n = m)
  | n, suc m => <=-step (LessOrEq' n m)

\func LessOrEq'' (n m : Nat) => \Pi (P : Nat -> Nat -> \Type) -> (\Pi (n : Nat) -> P n n) -> (\Pi (n m : Nat) -> P n m -> P n (suc m)) -> P n m

-- 2. Разрешимые предикаты.

-- Предикат -- это функция вида P : A -> \Type.
-- Предикат называется разрешимым, если существует алгоритм, разрешающий его, то есть по a : A возвращающий true, если P a верно, и false, если ложно.

-- Так как у нас логика интуиционистская, то не все предикаты разрешимы.
-- На самом деле, исключенное третье эквивалентно утверждению о том, что все предикаты разрешимы.

-- Пример неразрешимого предиката, который мы запишем неформально, так как его формальное описание будет довольно длинным.
-- P : Nat -> \Type
-- P n = "останавливается ли машина Тьюринга с номером n на входе n"
--
-- Мы не можем ни доказать, что P разрешим, ни опровергнуть это, так как мы не предполагаем ни исключенное третье, ни его отрицание.
--
-- Более простой пример неразрешимого предиката -- это предикат равенства двух функций типа Nat -> Nat.

-- Мы можем определить предикат разрешимости на предикатах.
\data Decide (A : \Type)
  | yes A
  | no (Not A)

-- DecPred P верно в тогда и только тогда, когда P разрешим.
\func DecPred {A : \Type} (P : A -> \Type) => \Pi (a : A) -> Decide (P a)

-- f __ x + g __ y == \lam a b => f a x + g b y

-- Например, предикат \lam n => n = 0 разрешим.
\func decide0 : DecPred (\lam (n : Nat) => n = 0) => \case \elim __ \with {
  | 0 => yes idp
  | suc p0 => no (\case __)
}

-- Если верно исключенное третье, то все предикаты разрешимы.

-- 3. Разрешимое равенство.

-- Мы можем определить класс типов, являющийся аналогом Eq в хаскелле, но в котором вместо функции == : A -> A -> Bool будет хранится доказательство, что равенство разрешимо.
-- Это лучше, так как в хаскелле в качестве == мы можем написать вообще произвольную функцию, даже такую, которая не имеет никакого смысла.
-- А при таком определении Eq функция равенства всегда будет определена корректно.
\class Eq (A : \Type) {
  | decideEq (a a' : A) : Decide (a = a')
  -- Функции, объявленные внутри класса принимают неявно инстанс этого класса в качестве первого аргумента.
  \func \infix 4 == (a a' : A) : Bool => \case decideEq a a' \with {
    | yes a1 => true
    | no n => false
  }
}

\open Eq(==)

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

-- Докажем, что равенство натуральных чисел разрешимо.
\instance NatEq : Eq Nat
  | decideEq (x y : Nat) : Decide (x = y) \with {
    | 0, 0 => yes idp
    | 0, suc y => no (\case __)
    | suc x, 0 => no (\case __)
    | suc x, suc y => \case decideEq x y \with {
      | yes a => yes (pmap suc a)
      | no n => no (\lam p => n (pmap pred p))
    }
  }

\func test1 : (0 == 0) = true => idp
\func test2 : (0 == 1) = false => idp

-- DecEq A верно в точности тогда, когда предикат равенства на A разрешим.
\func DecEq (A : \Type) => \Pi (a a' : A) -> Decide (a = a')

-- 4. Предикаты A -> Bool

-- Разрешимые предикаты вида A -> \Type в точности соответствуют функциям вида A -> Bool.

\func T-dec {b : Bool} : Decide (T b) \elim b
  | true => yes ()
  | false => no absurd

-- Легко построить функции из A -> Bool в тип разрешимых предикатов и наоборот.
-- Эти функции почти взаимно обратны. Это будет верно, если правильно сформулировать это утверждение.
\func FromBoolToDec {A : \Type} (p : A -> Bool)
  : \Sigma (P : A -> \Type) (DecPred P)
  => (\lam a => T (p a), \lam a => T-dec)

\func FromDecToBool {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) : A -> Bool
  => \lam a => \case P.2 a \with {
    | yes a1 => true
    | no n => false
  }

-- 5. Индукция-рекурсия

-- Рекурсия-рекурсия -- это принцип, позволяющий определять взаимно рекурсивные функции.
-- Пример: функции isEven и isOdd.
\func isEven (n : Nat) : Bool
  | 0 => true
  | suc n => isOdd n

\func isOdd (n : Nat) : Bool
  | 0 => false
  | suc n => isEven n

-- Индукция-индукция -- это принцип, позволяющий определять взаимно рекурсивные типы данных.
-- Когда мы определяем взаимно рекурсивный тип данных, нужно явно указывать его тип.
-- Пример: типы IsEven и IsOdd.
\data IsEven (n : Nat) : \Type \with
  | 0 => zie
  | suc n => oie (IsOdd n)

\data IsOdd (n : Nat) : \Type \with
  | suc n => eio (IsEven n)

-- Индукция-рекурсия -- это принцип, позволяющий определять тип данных, взаимно рекурсивный с функцией.
-- Мы можем определить свою вселенную, состоящую только из определенного набора типов, при помощи этого принципа

\data Type
  | nat
  | list Type
  | arr Type Type
  \where {
    \use \coerce toType (T : Type) => El T
  }

-- Мы должны еще определить функцию, которая переводит элементы Type в настоящие типы.
\func El (t : Type) : \Set0
  | nat => Nat
  | list t => List (El t)
  | arr t1 t2 => El t1 -> El t2

\func idc {T : Type} (x : T) : T => x

-- \func Arr (A B : \Type) => A -> B

-- \func Pi (A : \Type) (B : A -> \Type) => \Pi (x : A) -> B x

-- Если мы хотим определить вселенную, в которой у нас есть заисимые типы, то такое определение должно быть индуктивно-рекурсивным.
\data Type' : \Set0
  | nat'
  | list' Type'
  | pi (A : Type') (El' A -> Type')

\func El' (t : Type') : \Set0
  | nat' => Nat
  | list' t => List (El' t)
  | pi A B => \Pi (a : El' A) -> El' (B a)

-- 6. \case в языках с зависимыми типами является более сложной конструкцией в общем случаее, чем в языках без них.

-- foo лучше доказать, просто обобщив утверждение, но мы докажем ее через \case, чтобы продемонстировать возможности этой конструкции.
\func foo {A : \Type} (p : A -> Bool) (a : A) : p a = not (not (p a)) =>
  -- Перед \with мы можем написать \return <expr>, где <expr> -- это тип, который возвращается из \case.
  -- После выражения, на котором мы паттерн матчимся, можно написать \as b, где b -- это переменная, которая будет связана в этой конструкции.
  -- Эту переменную можно использовать в выражении, которое идет после \return.
  -- Идея в том, что возвращаемый тип может зависеть от выражения, на котором мы паттерн матчимся.
  -- Эту конструкцию можно использовать, чтобы эту зависимость явно указать.
  \case p a \as b \return b = not (not b) \with {
    | true => idp -- В каждом отдельном случае нам нужно будет вернуть указанный после \return тип, в котором b заменено на соответствующий паттерн. Например, здесь нужно вернуть значение типа true = not (not true).
    | false => idp -- А здесь мы возвращаем значение типа false = not (not false).
  }

-- foo можно переписать через helper.
\func foo' {A : \Type} (p : A -> Bool) (a : A) : p a = not (not (p a)) => aux (p a)
  \where {
    \func aux (b : Bool) : b = not (not b)
      | true => idp
      | false => idp
  }

-- 7. Пример доказательств через \case.

-- Вспомогательное утверждение.
\func <=-helper {x y : Nat} (p : LessOrEq x y) : LessOrEq x (suc y) \elim x, y, p
  | 0, _, _ => z<=_
  | suc x, suc y, s<=s p => s<=s (<=-helper p)

\func filter {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | :: x xs => \case p x \with {
    | true => x :: filter p xs
    | false => filter p xs
  }

\func <=-step-lem {n m : Nat} (n<=m : LessOrEq n m) : LessOrEq n (suc m) \elim n, m, n<=m
  | 0, m, z<=_ => z<=_
  | suc n, suc m, s<=s n<=m => s<=s (<=-step-lem n<=m)

-- Докажем, что длина отфильтрованного списка не превышает длины исходного.
\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A)
  : LessOrEq (length (filter p xs)) (length xs) \elim xs
  | nil => z<=_
  | :: a xs => \case p a \as b \return
                            LessOrEq (length (\case b \with {
                              | true => a :: filter p xs
                              | false => filter p xs
                            })) (suc (length xs))
  \with {
    | true => s<=s (filter-lem p xs)
    | false => <=-step-lem (filter-lem p xs)
  }

\func ex (n : Nat) : n = n
  => \case \elim n \with {
    | 0 => {?}
    | suc n1 => {?}
  }

-- 8. mcases

\func filter-lem' {A : \Type} (p : A -> Bool) (xs : List A)
  : LessOrEq (length (filter p xs)) (length xs) \elim xs
  | nil => z<=_
  | :: a xs => cases (p a) \with {
    | true => s<=s (filter-lem' p xs)
    | false => <=-step-lem (filter-lem' p xs)
  }

\func ex' (n : Nat) : n = n
  => cases n \with {
    | 0 => {?}
    | suc n1 => {?}
  }

\func filter-lem'' {A : \Type} (p : A -> Bool) (xs : List A)
  : LessOrEq (length (filter p xs)) (length xs) \elim xs
  | nil => z<=_
  | :: a xs => mcases \with {
    | true => s<=s (filter-lem'' p xs)
    | false => <=-step-lem (filter-lem'' p xs)
  }

-- 9. \case на idp.

-- Когда мы паттерн матчимся на некотором значении e, связь этого выражения с резльтатом паттерн матчинга теряется.
-- Например, в выражении \case e \with { | pat => expr } в expr мы даже не сможем доказать, что e равно pat.
-- Иногда бывает необходимо запоминать эту связь.
-- Для этого можно использовать следующий трюк.
-- Мы в \case кроме самого выражения еще паттерн матчимся на idp, но указываем ему тип, который зависит от первого значения.
-- Тогда в каждом случае q будем доказательством равенства между исходным значением и паттерном.
\func baz {A : \Type}
          (p : A -> Bool) (a : A) : p a = not (not (p a)) =>
  -- Мы можем явно указывать не только тип возвращаемого значения, но и типы выражений, на которых мы паттерн матчимся.
  -- И в них также можно использовать переменные, связанные в \as.
  \case p a \as b, idp : b = p a \with {
    | true, q => transport (\lam b => b = not (not b)) q idp -- Здесь q : true = p a
    | false, q => transport (\lam b => b = not (not b)) q idp -- Здесь q : false = p a
  }

\func baz' {A : \Type}
           (p : A -> Bool) (a : A) : p a = not (not (p a)) =>
  cases (p a arg addPath) \with {
    | true, q => idp
    | false, q => idp
  }

-- 10. Еще один пример.

\func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x
  => \case f true \as t, idp : f true = t, f false, \elim x \with {
    | true, p, _, true => repeat {2} (rewrite p) p
    | true, p, true, false => {?}
    | true, p, false, false => {?}
    | false, p, true, true => {?}
    | false, p, true, false => {?}
    | false, p, false, true => {?}
    | false, p, false, false => {?}
  }
