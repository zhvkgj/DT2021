\import Logic (TruncP, inP, truncP)
\import Logic.Meta
\import Meta
\import Paths (inv)
\import Paths.Meta
\import Utils
\import lect10(idp-left, sigmaEq,isProp, isSet)
\import lect11(DecEq,propExt)

-- Тип, являющиеся множествами, ведут себя как множества в теории множеств.
-- Это означает, что многие теоремы из нее можно доказать и в теории типов.
-- Например, мы можем доказать теорему Кантора, которая говорит, что мощность множества X строго меньше, чем мощность множества его подмножеств, то есть множества X -> \Prop.

-- Тот факт, что мощность меньше, означает, что существует инъекция из X в X -> \Prop.
-- \lam x => { x }
-- В качестве такой инъекции мы можем просто взять предикат равенства.
-- (=) : X -> (X -> \Prop)

\truncated \data Card : \Set
  | card \Set

\func leq (c1 c2 : Card) : \Prop
  | card X, card Y => ∃ (f : X -> Y) (isInj f)

-- Тот факт, что мощность строго меньше, означает, что не существует сюръекции вида
-- f : X -> (X -> \Prop)
-- Это легко доказать так же как и в классическом случае.

-- Некоторые факты невозможно доказать в теории типов, так как мы не предполагаем закон исключенного третьего или аксиому выбора.
-- Например, теорема Кантора-Бернштейна, которая говорит, что если одно множество вкладывается в другое, и наоборот, то между ними есть биекция, не доказуема без исключенного третьего.
-- При необходимости мы можем добавить эти классические принципы.
-- Тогда теория станет еще больше похожа на классическую теорию множеств.

-- 1. Сюръективные функции.

\func isInj {A B : \Set} (f : A -> B) => \Pi (x y : A) -> f x = f y -> x = y

-- Сюръективные функции определяютя очевидным образом.
-- Обратите внимание, что мы используем обрезание, так как хотим, чтобы этот тип был утверждением.
\func isSur {A B : \Type} (f : A -> B) : \Prop =>
     \Pi (b : B) -> ∃ (a : A) (f a = b)
  -- \Pi (b : B) -> \Sigma (a : A) (f a = b)

-- 2. Биекция = инъекция + сюръекция.

\func isBij {A B : \Set} (f : A -> B)
  => \Sigma (g : B -> A) (\Pi (x : A) -> g (f x) = x) (\Pi (y : B) -> f (g y) = y)

\func isBij->isInj {A B : \Set} (f : A -> B) (p : isBij f) : isInj f
  => \lam x y q => inv (p.2 x) *> pmap p.1 q *> p.2 y

\func isBij->isSur {A B : \Set} (f : A -> B) (p : isBij f) : isSur f
  => \lam b => inP (p.1 b, p.3 b)

\func isInj+isSur->isBij {A B : \Set} (f : A -> B) (ip : isInj f) (sp : isSur f) : isBij f
  -- \Sigma (a : A) (f a = b)
  => \have s b => TruncP.remove (\lam p q => ext (ip p.1 q.1 (p.2 *> inv q.2))) (sp b)
     \in (\lam b => (s b).1, \lam a => ip _ _ (s (f a)).2, \lam b => (s b).2)

-- 3. Определение Int.

\data Int'
  | pos' Nat
  | neg' Nat

-- Конструкторы в обычных типах данных не пересекаются.
-- Другими словами, мы всегда можем доказать, что con1 не равен con2.

-- Иногда бывает полезно определять типы данных, в которых это будет не верно.
-- Например, удобно определять целые числа как либо положительное натуральное число, либо отрицательное.
-- При этом, эти два конструктора будут пересекаться, так как положительный ноль совпадает с отрицательным.
-- Чтобы определить такой тип данных, нужно в одном или нескольких конструкторов добавить условия, которые говорят как он будет вычисляться.
-- Синтаксис такой же как и для определения функций при помощи паттерн матчинга.
-- Единственное отличие заключается в том, что не обязательно все случаи должны быть покрыты.
-- Например, мы можем определить как neg вычисляется только на zero, но не на suc.
-- Тогда neg 0 будет вычисляться в pos 0, но neg (suc n) будет уже в нормальной форме как обычный конструктор.
\data Int
  | pos Nat
  | neg Nat \with {
    | 0 => pos 0
  }

\func pos0=neg0 : pos 0 = neg 0 => idp

-- Когда мы определяем функцию над таким типом данных при помощи паттерн матчинга, система проверяет, что ее значение на эквивалентных конструкторах совпадают.
-- Например, следующее определение не пройдет, так как intEx (pos 0) равно 3, а intEx (neg 0) равно 7.
{-
\func intEx (z : Int) : Nat
  | pos n => 3
  | neg n => 7
-}

\func negative (x : Int) : Int
  | pos n => neg n
  | neg n => pos n

\func abs (x : Int) : Nat
  | pos n => n
  | neg n => n

-- Паттерны, которые вычисляются, можно пропускать в паттерн матчинге.
-- Например, в следующей функции мы не определили ее значение на neg 0, но система принимает это определение.
\func intEx' (m : Nat) (x : Int) : Nat \elim x
  | pos n => 2 Nat.* m
  | neg (suc n) => m Nat.+ m

-- intEx' m (neg 0) => intEx' m (pos 0) => 2 Nat.* m

-- 4. Окружность

\data S1
  | base
  | loop I \with {
    | left => base
    | right => base
  }

\func ploop : base = base => path loop

\func foo (s : S1) : S1
  | base => base
  | loop i => (ploop *> ploop) @ i

\func code (s : S1) : \Set
  | base => Int
  | loop i => iso {Int} {Int} {?} {?} {?} {?} i

-- 5. Фактор-множества.

-- Фактор-множества -- это полезная конструкция над множествами.
-- Если A -- множество с отношением эквивалентности ~ на нем, то мы можем определить новое множество A/~ вместе с функцией in~ : A -> A/~, которая делает равными эквивалентные элементы A.
-- A : \Set
-- ~ : A -> A -> \Prop
-- A/~ : \Set
-- in~ : A -> A/~
-- (in~ a = in~ a') <-> (a ~ a')

-- Чтобы определить функцию над A/~, достаточно задать ее на произвольном элементе a : A так, чтобы эквивалентным элементам соответствовали равные результаты.
-- Мы можем использовать примерно следующий синтаксим, но в нем нет доказательства этого условия.
-- Точный синтаксис приведен ниже.
-- \func f (x : A/~) : B
--   | in~ a => b

-- Фактор-множества можно определить при помощи типов данных с условиями.
-- Мы просто добавляем конструктор с параметром типа I и двумя условиями на него.
\truncated \data Quotient (A : \Type) (R : A -> A -> \Type) : \Set
  | in~ A
  | ~-quot {a a' : A} (R a a') (i : I) \elim i {
    | left => in~ a
    | right => in~ a'
  }

-- Тогда path (eq a a' r) будет задавать равенство между двумя элементами, указанными в этих условиях.
-- В данном случае мы получаем необходимое равенство между эквивалентными элементами.
\func quotientEq {A : \Type} {R : A -> A -> \Type} (a a' : A) (r : R a a')
  : in~ a = {Quotient A R} in~ a'
  => path (~-quot r)

-- Чтобы определить функцию над Quotient A R, необходимо задать ее на элементе вида inR a и на конструкторе eq,
-- что соответствует доказательству того, что эквивалентным элементам соответствуют равные значения.
\func quotientEx {A : \Type} {R : A -> A -> \Type} {B : \Set}
                 (f : A -> B) (p : \Pi {a a' : A} -> R a a' -> f a = f a')
                 (x : Quotient A R) : B \elim x
  | in~ a => f a
  | ~-quot r i => p r @ i

-- Пример использвания фактор-множеств -- это рациональные числа, которые определяются как пары целых чисел с точностью до эквивалентности.
-- Rat = (\Sigma Int (x : Int) (Not (x = 0))) / ~
-- Где (n,m,p) ~ (n',m',p') тогда и только тогда, когда n * m' = n' * m.

-- 6. setLem

\func cancelRight {A : \Type} {x y z : A}
                  {p q : x = y} {r : y = z} (s : p *> r = q *> r) : p = q \elim r
  | idp => s

\func setLem {A : \Type} (B : A -> A -> \Type) (pB : \Pi (x y : A) -> isProp (B x y))
             (f : \Pi (a : A) -> B a a) (G : \Pi {a a' : A} -> B a a' -> a = a')
  : isSet A
  => \let | F {a a' : A} (p : a = a') : B a a' => rewrite p (f a')
          | FG {a a' : A} (b : B a a') : F (G b) = b => pB _ _ _ _
          | H {a a' : A} (p : a = a') => G (F p)
          | H-idemp {a a' : A} (p : a = a') : H (H p) = H p => unfold H (pmap G (FG (F p)))
          | magic {a a' : A} (p : a = a') : H p = H idp *> p => \case \elim a', \elim p \with {
            | _, idp => idp
          }
          | magic2 {a a' : A} (p : a = a') : idp = H idp => cancelRight (idp-left (H p) *> inv (H-idemp p) *> magic (H p))
          | GF {a a' : A} (p : a = a') : H p = p => \case \elim a', \elim p \with {
            | _, idp => inv (magic2 idp)
          }
     \in \lam a a' p q => inv (GF p) *> pmap G (pB a a' (F p) (F q)) *> GF q
